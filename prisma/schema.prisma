// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  employees Employee[] @relation(name: "employeeUser")
  customers Customer[] @relation(name: "customerUser")
}

model Employee {
  id                Int     @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String?
  phone             String?
  addressId         Int?
  bankAccountNumber String?
  userId            Int?

  address         Address?         @relation(name: "employeeAddress", fields: [addressId], references: [id])
  user            User?            @relation(name: "employeeUser", fields: [userId], references: [id])
  managerForStore Store[]          @relation(name: "managerForStore")
  Order           Order[]
  stores          StoreEmployees[] @relation(name: "storeEmployees-employee")
}

model Address {
  id            Int     @id @default(autoincrement())
  street_line_1 String
  street_line_2 String  @default("")
  city          String
  state         String
  zip           String
  country       String
  latitude      String?
  longitude     String?

  employeeAddresses         Employee[] @relation(name: "employeeAddress")
  customerContactAddresses  Customer[] @relation(name: "customerContactAddress")
  customerBillingAddresses  Customer[] @relation(name: "customerBillingAddress")
  customerShippingAddresses Customer[] @relation(name: "customerShippingAddress")
  storeAddresses            Store[]    @relation(name: "storeAddress")
}

model Store {
  id        Int    @id @default(autoincrement())
  name      String
  type      String /// retail, warehouse, etc.
  addressId Int
  managerId Int

  address   Address          @relation(name: "storeAddress", fields: [addressId], references: [id])
  manager   Employee         @relation(name: "managerForStore", fields: [managerId], references: [id])
  Order     Order[]
  employees StoreEmployees[] @relation(name: "storeEmployees-store")
}

model StoreEmployees {
  storeId    Int
  employeeId Int

  Employee Employee @relation(name: "storeEmployees-employee", fields: [employeeId], references: [id])
  Store    Store    @relation(name: "storeEmployees-store", fields: [storeId], references: [id])

  @@id([storeId, employeeId])
}

model Customer {
  id                Int     @id @default(autoincrement())
  type              Int     @db.TinyInt()  /// 0=individual, 1=company
  company           String?
  companyRegId      String?
  companyTaxId      String?
  firstName         String?
  lastName          String?
  email             String?
  phone             String?
  pin               String?
  contactAddressId  Int?
  billingAddressId  Int?
  shippingAddressId Int?
  userId            Int?

  user            User?          @relation(name: "customerUser", fields: [userId], references: [id])
  contactAddress  Address?       @relation(name: "customerContactAddress", fields: [contactAddressId], references: [id])
  billingAddress  Address?       @relation(name: "customerBillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress Address?       @relation(name: "customerShippingAddress", fields: [shippingAddressId], references: [id])
  CustomerCard    CustomerCard[]
  Order           Order[]
}

model CustomerCard {
  id         Int      @id @default(autoincrement())
  customerId Int
  cardNumber String
  cardType   String
  createdAt  DateTime
  expiresAt  DateTime

  customer Customer @relation(fields: [customerId], references: [id])
}

model Product {
  id           Int     @id @default(autoincrement())
  name         String
  description  String  @db.Text
  price        Int
  vatRate      Float?
  eanCode      String?
  skuCode      String?
  upcCode      String?
  mpnCode      String?
  brand        String?
  manufacturer String?
  weight       String?
  weightUnit   String?
  perPackage   Int?
  parentId     Int?

  parent   Product?  @relation(name: "productParent", fields: [parentId], references: [id])
  children Product[] @relation(name: "productParent")
}

model Stock {
  productId Int
  storeId   Int
  quantity  Int

  @@id([productId, storeId])
}

model Order {
  id            Int       @id @default(autoincrement())
  customerId    Int?
  storeId       Int
  employeeId    Int?
  type          String /// online, cashier, self-service, etc.
  status        String
  createdAt     DateTime
  paidAt        DateTime?
  paymentMethod String?

  customer Customer?   @relation(fields: [customerId], references: [id])
  store    Store       @relation(fields: [storeId], references: [id])
  employee Employee?   @relation(fields: [employeeId], references: [id])
  items    OrderItem[]
}

model OrderItem {
  id        Int    @id @default(autoincrement())
  orderId   Int
  productId Int?
  quantity  Int
  price     Int
  vatRate   Float
  discount  String

  order Order @relation(fields: [orderId], references: [id])
}
